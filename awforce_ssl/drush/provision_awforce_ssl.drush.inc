<?php

// We put the generation here because it will be executed as the aegir user
function drush_provision_awforce_ssl_post_provision_verify() {
  if (d()->type == 'site' && d()->ssl_enabled) {
    // Filter out the '@'
    $sitename = substr(d()->name, 1);

    if ($sitename == 'hostmaster') {
      drush_log('[provision_awforce_ssl] Skipping LE setup for hostmaster.');
    }

    $cert_dir = "/var/aegir/config/acme/letsencryptsh/certs/" . $sitename . '/';

    if (!file_exists($cert_dir)) {
      drush_log('[provision_awforce_ssl] Generating LE certificates for ' . $sitename);

      $output = '';
      exec("/var/aegir/config/acme/letsencryptsh/letsencrypt.sh -c --domain " . $sitename, $output);

      drush_log('output: ' . implode(' ', $output));
      // Should now exist
      if (!file_exists($cert_dir)) {
        drush_log("Error: The certificate was not generated. This is probably a permissions issue.", 'error');
        return;
      }
      else {
        drush_log("Certificate successfully generated in " . $cert_dir, 'success');
      }
    }
    else {
      drush_log("The LE certificate for this domain already exists: " . $cert_dir, 'success');
    }

    $ssl_symlinks[] = "/var/aegir/config/ssl.d/" . $sitename;
    $ssl_symlinks[] = "/var/aegir/config/server_master/ssl.d/" . $sitename;

    foreach ($ssl_symlinks as $symlink) {
      if (file_exists($symlink)) {
        drush_log('[provision_awforce_ssl] File exists: ' . $symlink);

        if (!is_link($symlink)) {
          drush_log('[provision_awforce_ssl] Moving original directory out of the way: ' . $symlink);

          // This will overwrite symlink.bak if necessary, so we don't end up
          // with dozens of backups of unused certificates.
          rename ($symlink, $symlink . ".bak");
        }
        else {
          drush_log('[provision_awforce_ssl] SSL certificate already symlinked: ' . $symlink, 'success');

          continue;
        }
      }

      drush_log('[provision_awforce_ssl] Creating symlink at ' . $symlink);
      
      if (symlink($cert_dir, $symlink)) {
        drush_log('[provision_awforce_ssl] Symlinked cert directory to ' . $symlink, 'success');
      }
      else {
        drush_log('[provision_awforce_ssl] Could not symlink cert directory to ' . $symlink, 'warning');
      }
    }
  
    drush_log('[provision_awforce_ssl] Replacing openssl symlinks.');

    $filenames = array(
      'openssl.crt' => 'cert.pem',
      'openssl.csr' => 'cert.csr',
      'openssl.key' => 'privkey.pem',
      'openssl_chain.crt' => 'fullchain.pem',
    );

    $success = TRUE;
    foreach ($filenames as $original => $target) {
      // Remove current symlink or file (this would have been generated by
      // Aegir AFTER the original dir symlinking, meaning it's self-generated
      // and therefore unimportant.
      unlink($cert_dir . $original);

      $success = ($success && symlink($cert_dir . $target, $cert_dir . $original));
    }

    if ($success) {
      drush_log('[provision_awforce_ssl] Successfully replaced all symlinks.', 'success');
    }
    else {
      drush_log('[provision_awforce_ssl] Could not replace one or more symlinks. Check ' . $certdir, 'warning');
    }
  }
}
