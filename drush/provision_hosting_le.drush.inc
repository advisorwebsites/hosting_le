<?php

function drush_provision_hosting_le_post_provision_install() {
  drush_provision_hosting_le_post_provision_verify();
}

// We put the generation here because it will be executed as the aegir user
function drush_provision_hosting_le_post_provision_verify() {
  if (d()->type == 'site' && d()->ssl_enabled) {
    // Filter out the '@'
    $sitename = substr(d()->name, 1);
    drush_log('[provision_hosting_le] sitename is ' . $sitename);

    $aegir_root = getenv('HOME');
    drush_log('[provision_hosting_le] aegir_root is ' . $aegir_root);

    if ($sitename == 'hostmaster') {
      drush_log('[provision_hosting_le] Skipping LE setup for hostmaster.');
    }

    $cert_dir = $aegir_root . "/tools/le/certs/" . $sitename . '/';
    drush_log('[provision_hosting_le] cert_dir is ' . $cert_dir);

    if (!file_exists($cert_dir)) {
      drush_log('[provision_hosting_le] Generating LE certificates for ' . $sitename);

      $output = '';
      $wwwname = "www." . $sitename;
      exec("/bin/bash " . $aegir_root . "/tools/le/letsencrypt.sh -c -d " . $sitename . " " . $wwwname, $output);

      drush_log('[provision_hosting_le] Output: ' . implode(' ', $output));
      // Should now exist
      if (!file_exists($cert_dir)) {
        drush_log("Error: The certificate was not generated. This is probably a permissions issue.", 'error');
        return;
      }
      else {
        drush_log("The LE Certificate successfully generated in " . $cert_dir, 'success');
      }
    }
    else {
      drush_log("The LE Certificate for this domain already exists: " . $cert_dir, 'success');
    }

    $ssl_symlinks[] = $aegir_root . "/config/ssl.d/" . $sitename;
    $ssl_symlinks[] = $aegir_root . "/config/server_master/ssl.d/" . $sitename;

    foreach ($ssl_symlinks as $symlink) {
      if (file_exists($symlink)) {
        drush_log('[provision_hosting_le] File exists: ' . $symlink);

        if (!is_link($symlink)) {
          drush_log('[provision_hosting_le] Moving original directory out of the way: ' . $symlink);

          // This will overwrite symlink.bak if necessary, so we don't end up
          // with dozens of backups of unused certificates.
          rename ($symlink, $symlink . ".bak");
        }
        else {
          drush_log('[provision_hosting_le] SSL certificate already symlinked: ' . $symlink, 'success');
          continue;
        }
      }

      drush_log('[provision_hosting_le] Creating symlink at ' . $symlink);

      if (symlink($cert_dir, $symlink)) {
        drush_log('[provision_hosting_le] Symlinked cert directory to ' . $symlink, 'success');
      }
      else {
        drush_log('[provision_hosting_le] Could not symlink cert directory to ' . $symlink, 'warning');
      }
    }

    drush_log('[provision_hosting_le] Replacing openssl symlinks.');

    $filenames = array(
      'openssl.crt' => 'cert.pem',
      'openssl.csr' => 'cert.csr',
      'openssl.key' => 'privkey.pem',
      'openssl_chain.crt' => 'fullchain.pem',
    );

    $success = TRUE;
    foreach ($filenames as $original => $target) {
      // Remove current symlink or file (this would have been generated by
      // Aegir AFTER the original dir symlinking, meaning it's self-generated
      // and therefore unimportant.
      unlink($cert_dir . $original);

      $success = ($success && symlink($cert_dir . $target, $cert_dir . $original));
    }

    if ($success) {
      drush_log('[provision_hosting_le] Successfully replaced all symlinks.', 'success');
    }
    else {
      drush_log('[provision_hosting_le] Could not replace one or more symlinks. Check ' . $certdir, 'warning');
    }

    drush_log('[provision_hosting_le] Running nginx service graceful reload');
    shell_exec('sudo /etc/init.d/nginx reload');
  }
}
